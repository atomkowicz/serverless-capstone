service:
  name: serverless-cap-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  
custom:
  serverless-offline:
    httpPort: 8080
    useChildProcesses: true

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - ${self:provider.stage}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless cap
        description: Serverless application for creating todos
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(src/requests/schema/create-todo.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(src/requests/schema/update-todo.json)}    

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
        
  environment:
    TODOS_TABLE: Cap-Todo-${self:provider.stage}
    TODO_INDEX_NAME: TodoIdIndex
    AUTH0_JSON_KEY_URL: https://dev-1nt0v2c1.auth0.com/.well-known/jwks.json
    TODOS_S3_BUCKET: serverless-cap-bucket-5hv3az69bh-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:274225709315:table/${self:provider.environment.TODOS_TABLE}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274225709315:table/${self:provider.environment.TODOS_TABLE}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update todo
            description: Update todo
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274225709315:table/${self:provider.environment.TODOS_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274225709315:table/${self:provider.environment.TODOS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274225709315:table/${self:provider.environment.TODOS_TABLE}
        
  # SendUploadNotifications:
  #   environment:
  #     STAGE: ${self:provider.stage}
  #     API_ID:
  #       Ref: WebsocketsApi
  #   handler: src/lambda/s3/sendNotifications.handler
  #   events:
  #     - sns:
  #         arn:
  #           Fn::Join:
  #             - ':'
  #             - - arn:aws:sns
  #               - Ref: AWS::Region
  #               - Ref: AWS::AccountId
  #               - ${self:custom.topicName}
  #         topicName: ${self:custom.topicName}

  # ResizeImage:
  #   handler: src/lambda/s3/resizeImage.handler
  #   events:
  #     - sns:
  #         arn:
  #           Fn::Join:
  #             - ':'
  #             - - arn:aws:sns
  #               - Ref: AWS::Region
  #               - Ref: AWS::AccountId
  #               - ${self:custom.topicName}
  #         topicName: ${self:custom.topicName}

  # ConnectHandler:
  #   handler: src/lambda/websocket/connect.handler
  #   events:
  #     - websocket:
  #         route: $connect

  # DisconnectHandler:
  #   handler: src/lambda/websocket/disconnect.handler
  #   events:
  #     - websocket:
  #         route: $disconnect
      
resources:
  - ${file(./resources/dynamo_db.yml)}
  - ${file(./resources/api_gateway.yml)}
  - ${file(./resources/s3.yml)}
  # Resources:
  #   GatewayResponseDefault4XX:
  #     Type: AWS::ApiGateway::GatewayResponse
  #     Properties:
  #       ResponseParameters:
  #         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  #         gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #         gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
  #       ResponseType: DEFAULT_4XX
  #       RestApiId:
  #         Ref: ApiGatewayRestApi

  #   RequestBodyValidator:
  #     Type: AWS::ApiGateway::RequestValidator
  #     Properties:
  #       Name: 'request-body-validator'
  #       RestApiId:
  #         Ref: ApiGatewayRestApi
  #       ValidateRequestBody: true
  #       ValidateRequestParameters: false

  #   TodoDynamoDBTable:
  #     Type: "AWS::DynamoDB::Table"
  #     Properties:
  #       AttributeDefinitions:
  #         - AttributeName: userId
  #           AttributeType: S
  #         - AttributeName: todoId
  #           AttributeType: S
  #         - AttributeName: createdAt
  #           AttributeType: S
  #       KeySchema:
  #         - AttributeName: userId
  #           KeyType: HASH
  #         - AttributeName: todoId
  #           KeyType: RANGE
  #       BillingMode: PAY_PER_REQUEST
  #       TableName: ${self:provider.environment.TODOS_TABLE}
  #       GlobalSecondaryIndexes:
  #         - IndexName: ${self:provider.environment.TODO_INDEX_NAME}
  #           KeySchema:
  #           - AttributeName: userId
  #             KeyType: HASH
  #           - AttributeName: createdAt
  #             KeyType: RANGE
  #           Projection:
  #             ProjectionType: ALL

  #   # ImagesDynamoDBTable:
  #   #   Type: "AWS::DynamoDB::Table"
  #   #   Properties:
  #   #     AttributeDefinitions:
  #   #       - AttributeName: groupId
  #   #         AttributeType: S
  #   #       - AttributeName: timestamp
  #   #         AttributeType: S
  #   #       - AttributeName: imageId
  #   #         AttributeType: S
  #   #     KeySchema:
  #   #       - AttributeName: groupId
  #   #         KeyType: HASH
  #   #       - AttributeName: timestamp
  #   #         KeyType: RANGE
  #   #     BillingMode: PAY_PER_REQUEST
  #   #     StreamSpecification:
  #   #       StreamViewType: NEW_IMAGE
  #   #     TableName: ${self:provider.environment.IMAGES_TABLE}
  #   #     GlobalSecondaryIndexes:
  #   #       - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
  #   #         KeySchema:
  #   #         - AttributeName: imageId
  #   #           KeyType: HASH
  #   #         Projection:
  #   #           ProjectionType: ALL

  #   # WebSocketConnectionsDynamoDBTable:
  #   #   Type: AWS::DynamoDB::Table
  #   #   Properties:
  #   #     AttributeDefinitions:
  #   #       -
  #   #         AttributeName: id
  #   #         AttributeType: S
  #   #     KeySchema:
  #   #       -
  #   #         AttributeName: id
  #   #         KeyType: HASH
  #   #     BillingMode: PAY_PER_REQUEST
  #   #     TableName: ${self:provider.environment.CONNECTIONS_TABLE}
          
  #   AttachmentsBucket:
  #     Type: AWS::S3::Bucket
  #     Properties:
  #       BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
  #       CorsConfiguration:
  #         CorsRules:
  #           -
  #             AllowedOrigins:
  #               - '*'
  #             AllowedHeaders:
  #               - '*'
  #             AllowedMethods:
  #               - GET
  #               - PUT
  #               - POST
  #               - DELETE
  #               - HEAD
  #             MaxAge: 3000

  #   BucketPolicy:
  #     Type: AWS::S3::BucketPolicy
  #     Properties:
  #       PolicyDocument:
  #         Id: PublicReadForGetBucketObjectsPolicy
  #         Version: "2012-10-17"
  #         Statement:
  #           - Sid: PublicReadForGetBucketObjects
  #             Effect: Allow
  #             Principal: '*'
  #             Action: 's3:GetObject'
  #             Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
  #       Bucket: !Ref AttachmentsBucket